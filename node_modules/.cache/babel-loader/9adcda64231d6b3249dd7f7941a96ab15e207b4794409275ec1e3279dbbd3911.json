{"ast":null,"code":"var _jsxFileName = \"D:\\\\Besant\\\\REACT_app\\\\myapp\\\\src\\\\App.js\";\n// React js completely based in components\n// There are two types\n// 1.Class based components : Stateful components -> which have own state\n// oops based\n// 2.Functional components : stateless components\n// Hooks methods\n\n// import React, { useSyncExternalStore } from \"react\";\n\n// How to make components -> using JSX rules\n// 1.Function name / class name - first letter should be capital\n// 2.return key word\n// 3.Any one block element - div , main , section\n// 4.id = id , class = calssName\n// 5.Html attributes are camel case\n// eg : onclick - onclick\n//6.Every tag is open & close is mandatory ex : <br> </br> r <br/>\n// export component\n// export default component ----------------------------------------------------------------------------------------\n\n// import \"./index.css\"\n// const style={\n//     color:\"yellow\",\n//     backgroundColor:\"green\"\n// }\n\n// export function App(){\n//     return(\n//         <div className=\"a\">\n//             <h1 style={{color:\"red\",backgroundColor:'green'}}>React JS</h1>\n//             <p>This is my paragraph</p>\n//             <p>This para is too long</p>\n//             <button>Click</button>\n//         </div>\n//     )\n// }\n\n//  export default App; \n\n// export function App1(){\n//     return(\n//         <div>\n//             <h1 style={style}>App1 Components</h1>\n//         </div>\n//     )\n// }\n\n// import React from \"react\";\n// const style={\n//     backgroundColor:\"blue\"\n//  }\n// class App extends React.Component{\n//     render(){\n//         return(\n//             <div>\n//                 <h1 style={{color:\"red\"}}>Class based component</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// export default App;\n\n//==============================================================================================================\n// DAY 2 (Compositon & Inheritance)\n\n// Compositon : combining one component & another component\n// it converts into new component [classes & function]\n\n// import React from \"react\";\n// import Data from \"./Data.js\"\n// function App(){\n//     return(\n//         <div>\n//             <h1>Compositon method</h1>\n//             <App1></App1>\n//             <App2></App2> \n//             <Data></Data>\n//         </div>\n//     )\n// }\n//  we can call App 1, 2 in App only or App2 can call in App1 also\n\n// function App1(){\n//     return(\n//         <div>\n//             <button>Read me</button>\n//         </div>\n//     )\n// }\n\n// function App2(){\n//     return(\n//         <div>\n//             <button>Click</button>\n//         </div>\n//     )\n// }\n// export default App;\n\n// Inheritance : one class is derived from another class [class component] only for \n// compostion method means we can have either parent inside child,only parent element can be call\n\n// import React from \"react\";\n// class App extends React.Component{\n//     render(){\n//         return(\n//             <div>\n//                 <h1>Class component</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// class App1 extends App{\n//     render(){\n//         const parent=super.render() \n//         return(\n//             <div>\n//                 {parent}    \n//                 <h1>Parent component</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// class App2 extends App1{\n//     render(){\n//         const parent = super.render()\n//         return(\n//             <div>\n//                 {parent}\n//                 <h1>Child component</h1>\n//             </div>\n//         )\n//     }\n// }\n// export default App2;\n\n//=> Props --> properties : pass the information from one component to another\n// declare within a curley bracket we can declare properties {}\n// props are immutable - we can't change\n// Destructuring : It is used to make multi line props to singel line props \n\n// function App(Props){\n//     let data=\"Hello\"\n//     let x=\"Good Morning\"\n//     return(\n//         <div>\n//             <h1>Functional component {data}</h1>\n//             <App1 value={data} send={x}/>\n//         </div>\n//     )\n// }\n// function App1(props){\n//     const {value,send}=props\n//     return(\n//         <div>\n//             <h1>Child component {value} and {send}</h1>\n//             <App2 data={value} y={send}/>\n//         </div>\n//     )\n// }\n// function App2(props){\n//     const {data,y} = props\n//     return(\n//         <div>\n//             <h1>Nth child component {props.data} {y}</h1>\n//         </div>\n//     )\n// }\n// export default App;\n\n// ======================================================================================================================================\n// DAY 3 => Props & prop-types (continueing Props)\n\n// function App({data,value,fname,city}){  //(OR) in arugument plaace instead of props we can pass directly properties name \n// const {data,value,fname,city} = props  // Destructuring method\n//     return(\n//         <div>\n//             <h1>Parent component</h1>\n//             <p>{data}</p>\n//             <p>{value}</p>\n//             <p>{fname}</p>\n//             <p>{city}</p>\n//         </div>\n//     )\n// }\n\n// function Child(){\n//     let a = \"Good morning\"\n//     let b = \"Besant Technology\"\n//     return(\n//         <div>\n//             <h1>Child component </h1>\n//             <App data={a} value={b} fname={\"Ram \"} city={\"Banglore\"}/>\n//         </div>\n//     )\n// }\n// export default Child;\n\n//----------------------------------------------------------------------\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  render() {\n    const {\n      data,\n      value,\n      fname,\n      city\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Parent component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: fname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","App","Component","render","data","value","fname","city","props","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Besant/REACT_app/myapp/src/App.js"],"sourcesContent":["// React js completely based in components\r\n// There are two types\r\n// 1.Class based components : Stateful components -> which have own state\r\n    // oops based\r\n// 2.Functional components : stateless components\r\n    // Hooks methods\r\n\r\n// import React, { useSyncExternalStore } from \"react\";\r\n\r\n// How to make components -> using JSX rules\r\n// 1.Function name / class name - first letter should be capital\r\n// 2.return key word\r\n// 3.Any one block element - div , main , section\r\n// 4.id = id , class = calssName\r\n// 5.Html attributes are camel case\r\n    // eg : onclick - onclick\r\n//6.Every tag is open & close is mandatory ex : <br> </br> r <br/>\r\n// export component\r\n// export default component ----------------------------------------------------------------------------------------\r\n\r\n\r\n// import \"./index.css\"\r\n// const style={\r\n//     color:\"yellow\",\r\n//     backgroundColor:\"green\"\r\n// }\r\n\r\n// export function App(){\r\n//     return(\r\n//         <div className=\"a\">\r\n//             <h1 style={{color:\"red\",backgroundColor:'green'}}>React JS</h1>\r\n//             <p>This is my paragraph</p>\r\n//             <p>This para is too long</p>\r\n//             <button>Click</button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n//  export default App; \r\n\r\n\r\n// export function App1(){\r\n//     return(\r\n//         <div>\r\n//             <h1 style={style}>App1 Components</h1>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// import React from \"react\";\r\n// const style={\r\n//     backgroundColor:\"blue\"\r\n//  }\r\n// class App extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1 style={{color:\"red\"}}>Class based component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n//==============================================================================================================\r\n// DAY 2 (Compositon & Inheritance)\r\n\r\n// Compositon : combining one component & another component\r\n        // it converts into new component [classes & function]\r\n\r\n// import React from \"react\";\r\n// import Data from \"./Data.js\"\r\n// function App(){\r\n//     return(\r\n//         <div>\r\n//             <h1>Compositon method</h1>\r\n//             <App1></App1>\r\n//             <App2></App2> \r\n//             <Data></Data>\r\n//         </div>\r\n//     )\r\n// }\r\n//  we can call App 1, 2 in App only or App2 can call in App1 also\r\n\r\n// function App1(){\r\n//     return(\r\n//         <div>\r\n//             <button>Read me</button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// function App2(){\r\n//     return(\r\n//         <div>\r\n//             <button>Click</button>\r\n//         </div>\r\n//     )\r\n// }\r\n// export default App;\r\n\r\n// Inheritance : one class is derived from another class [class component] only for \r\n// compostion method means we can have either parent inside child,only parent element can be call\r\n\r\n// import React from \"react\";\r\n// class App extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1>Class component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class App1 extends App{\r\n//     render(){\r\n//         const parent=super.render() \r\n//         return(\r\n//             <div>\r\n//                 {parent}    \r\n//                 <h1>Parent component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class App2 extends App1{\r\n//     render(){\r\n//         const parent = super.render()\r\n//         return(\r\n//             <div>\r\n//                 {parent}\r\n//                 <h1>Child component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n// export default App2;\r\n\r\n//=> Props --> properties : pass the information from one component to another\r\n// declare within a curley bracket we can declare properties {}\r\n// props are immutable - we can't change\r\n// Destructuring : It is used to make multi line props to singel line props \r\n\r\n// function App(Props){\r\n//     let data=\"Hello\"\r\n//     let x=\"Good Morning\"\r\n//     return(\r\n//         <div>\r\n//             <h1>Functional component {data}</h1>\r\n//             <App1 value={data} send={x}/>\r\n//         </div>\r\n//     )\r\n// }\r\n// function App1(props){\r\n//     const {value,send}=props\r\n//     return(\r\n//         <div>\r\n//             <h1>Child component {value} and {send}</h1>\r\n//             <App2 data={value} y={send}/>\r\n//         </div>\r\n//     )\r\n// }\r\n// function App2(props){\r\n//     const {data,y} = props\r\n//     return(\r\n//         <div>\r\n//             <h1>Nth child component {props.data} {y}</h1>\r\n//         </div>\r\n//     )\r\n// }\r\n// export default App;\r\n\r\n// ======================================================================================================================================\r\n// DAY 3 => Props & prop-types (continueing Props)\r\n\r\n// function App({data,value,fname,city}){  //(OR) in arugument plaace instead of props we can pass directly properties name \r\n    // const {data,value,fname,city} = props  // Destructuring method\r\n//     return(\r\n//         <div>\r\n//             <h1>Parent component</h1>\r\n//             <p>{data}</p>\r\n//             <p>{value}</p>\r\n//             <p>{fname}</p>\r\n//             <p>{city}</p>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// function Child(){\r\n//     let a = \"Good morning\"\r\n//     let b = \"Besant Technology\"\r\n//     return(\r\n//         <div>\r\n//             <h1>Child component </h1>\r\n//             <App data={a} value={b} fname={\"Ram \"} city={\"Banglore\"}/>\r\n//         </div>\r\n//     )\r\n// }\r\n// export default Child;\r\n\r\n//----------------------------------------------------------------------\r\nimport React from \"react\";\r\nclass App extends React.Component{\r\n    render(){\r\n        const {data,value,fname,city} = this.props\r\n        return(\r\n            <div>\r\n                <h1>Parent component</h1>\r\n                <p>{}</p>\r\n                <p>{value}</p>\r\n                <p>{fname}</p>\r\n                <p>{city}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"],"mappings":";AAAA;AACA;AACA;AACI;AACJ;AACI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,GAAG,SAASH,KAAK,CAACI,SAAS;EAC7BC,MAAMA,CAAA,EAAE;IACJ,MAAM;MAACC,IAAI;MAACC,KAAK;MAACC,KAAK;MAACC;IAAI,CAAC,GAAG,IAAI,CAACC,KAAK;IAC1C,oBACIR,OAAA;MAAAS,QAAA,gBACIT,OAAA;QAAAS,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBb,OAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTb,OAAA;QAAAS,QAAA,EAAIJ;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdb,OAAA;QAAAS,QAAA,EAAIH;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdb,OAAA;QAAAS,QAAA,EAAIF;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAEd;AACJ;AAEA,eAAeZ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}