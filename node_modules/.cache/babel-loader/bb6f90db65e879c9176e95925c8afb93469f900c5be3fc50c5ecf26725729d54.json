{"ast":null,"code":"var _jsxFileName = \"D:\\\\Besant\\\\REACT_app\\\\myapp\\\\src\\\\App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// React js completely based in components\n// There are two types\n// 1.Class based components : Stateful components -> which have own state\n// oops based\n// 2.Functional components : stateless components\n// Hooks methods\n\n// How to make components -> using JSX rules\n// 1.Function name / class name - first letter should be capital\n// 2.return key word\n// 3.Any one block element - div , main , section\n// 4.id = id , class = calssName\n// 5.Html attributes are camel case\n// eg : onclick - onclick\n//6.Every tag is open & close is mandatory ex : <br> </br> r <br/>\n// export component\n// export default component\n\n// import \"./index.css\"\n// const style={\n//     color:\"yellow\",\n//     backgroundColor:\"green\"\n// }\n\n// export function App(){\n//     return(\n//         <div className=\"a\">\n//             <h1 style={{color:\"red\",backgroundColor:'green'}}>React JS</h1>\n//             <p>This is my paragraph</p>\n//             <p>This para is too long</p>\n//             <button>Click</button>\n//         </div>\n//     )\n// }\n\n// // export default App; \n\n// export function App1(){\n//     return(\n//         <div>\n//             <h1 style={style}>App1 Components</h1>\n//         </div>\n//     )\n// }\n\n// import React from \"react\";\n// // const style={\n// //     backgroundColor:\"blue\"\n// // }\n// class App extends React.Component{\n//     render(){\n//         return(\n//             <div>\n//                 <h1 style={{color:\"red\"}}>Class based component</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// export default App;\n\n//==============================================================================================================\n// DAY 2 (Compositon & Inheritance)\n\n// Compositon : combining one component & another component\n// it converts into new component [classes & function]\n\n// import React from \"react\";\n// import Data from \"./Data.js\"\n// function App(){\n//     return(\n//         <div>\n//             <h1>Compositon method</h1>\n//             <App1></App1>\n//             <App2></App2> \n//             <Data></Data>\n//         </div>\n//     )\n// }\n// // we can call App 1, 2 in App only or App2 can call in App1 also\n\n// function App1(){\n//     return(\n//         <div>\n//             <button>Read me</button>\n//         </div>\n//     )\n// }\n\n// function App2(){\n//     return(\n//         <div>\n//             <button>Click</button>\n//         </div>\n//     )\n// }\n// export default App;\n\n// Inheritance : one class is derived from another class [class component] only for \n// compostion method means we can have either parent inside child,only parent element can be call\n\n// import React from \"react\";\n// class App extends React.Component{\n//     render(){\n//         return(\n//             <div>\n//                 <h1>Class component</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// class App1 extends App{\n//     render(){\n//         const parent=super.render() \n//         return(\n//             <div>\n//                 {parent}    \n//                 <h1>Parent component</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// class App2 extends App1{\n//     render(){\n//         const parent = super.render()\n//         return(\n//             <div>\n//                 {parent}\n//                 <h1>Child component</h1>\n//             </div>\n//         )\n//     }\n// }\n// export default App2;\n\n//=> Props --> properties : pass the information from one component to another\n// declare within a curley bracket we can declare properties {}\n// props are immutable - we can't change\n\nfunction App(Props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Functional component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_c = App;\nfunction App1(Props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Child component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n_c2 = App1;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"App1\");","map":{"version":3,"names":["App","Props","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App1","_c2","$RefreshReg$"],"sources":["D:/Besant/REACT_app/myapp/src/App.js"],"sourcesContent":["// React js completely based in components\r\n// There are two types\r\n// 1.Class based components : Stateful components -> which have own state\r\n    // oops based\r\n// 2.Functional components : stateless components\r\n    // Hooks methods\r\n\r\n// How to make components -> using JSX rules\r\n// 1.Function name / class name - first letter should be capital\r\n// 2.return key word\r\n// 3.Any one block element - div , main , section\r\n// 4.id = id , class = calssName\r\n// 5.Html attributes are camel case\r\n    // eg : onclick - onclick\r\n//6.Every tag is open & close is mandatory ex : <br> </br> r <br/>\r\n// export component\r\n// export default component\r\n\r\n// import \"./index.css\"\r\n// const style={\r\n//     color:\"yellow\",\r\n//     backgroundColor:\"green\"\r\n// }\r\n\r\n// export function App(){\r\n//     return(\r\n//         <div className=\"a\">\r\n//             <h1 style={{color:\"red\",backgroundColor:'green'}}>React JS</h1>\r\n//             <p>This is my paragraph</p>\r\n//             <p>This para is too long</p>\r\n//             <button>Click</button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// // export default App; \r\n\r\n\r\n// export function App1(){\r\n//     return(\r\n//         <div>\r\n//             <h1 style={style}>App1 Components</h1>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// import React from \"react\";\r\n// // const style={\r\n// //     backgroundColor:\"blue\"\r\n// // }\r\n// class App extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1 style={{color:\"red\"}}>Class based component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default App;\r\n\r\n//==============================================================================================================\r\n// DAY 2 (Compositon & Inheritance)\r\n\r\n// Compositon : combining one component & another component\r\n        // it converts into new component [classes & function]\r\n\r\n// import React from \"react\";\r\n// import Data from \"./Data.js\"\r\n// function App(){\r\n//     return(\r\n//         <div>\r\n//             <h1>Compositon method</h1>\r\n//             <App1></App1>\r\n//             <App2></App2> \r\n//             <Data></Data>\r\n//         </div>\r\n//     )\r\n// }\r\n// // we can call App 1, 2 in App only or App2 can call in App1 also\r\n\r\n// function App1(){\r\n//     return(\r\n//         <div>\r\n//             <button>Read me</button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// function App2(){\r\n//     return(\r\n//         <div>\r\n//             <button>Click</button>\r\n//         </div>\r\n//     )\r\n// }\r\n// export default App;\r\n\r\n// Inheritance : one class is derived from another class [class component] only for \r\n// compostion method means we can have either parent inside child,only parent element can be call\r\n\r\n// import React from \"react\";\r\n// class App extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1>Class component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class App1 extends App{\r\n//     render(){\r\n//         const parent=super.render() \r\n//         return(\r\n//             <div>\r\n//                 {parent}    \r\n//                 <h1>Parent component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class App2 extends App1{\r\n//     render(){\r\n//         const parent = super.render()\r\n//         return(\r\n//             <div>\r\n//                 {parent}\r\n//                 <h1>Child component</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n// export default App2;\r\n\r\n//=> Props --> properties : pass the information from one component to another\r\n// declare within a curley bracket we can declare properties {}\r\n// props are immutable - we can't change\r\n\r\nfunction App(Props){\r\n    return(\r\n        <div>\r\n            <h1>Functional component</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction App1(Props){\r\n    return(\r\n        <div>\r\n            <h1>Child component</h1>\r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA;AACA;AACA;AACI;AACJ;AACI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACQ;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,GAAGA,CAACC,KAAK,EAAC;EACf,oBACIC,OAAA;IAAAC,QAAA,eACID,OAAA;MAAAC,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEd;AAACC,EAAA,GANQR,GAAG;AAQZ,SAASS,IAAIA,CAACR,KAAK,EAAC;EAChB,oBACIC,OAAA;IAAAC,QAAA,eACID,OAAA;MAAAC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEd;AAACG,GAAA,GANQD,IAAI;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}